"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A custom error class to handle application-specific errors in an Express app.
 * This class extends the built-in `Error` class and adds additional properties
 * to distinguish between operational and programming errors.
 */
class AppError extends Error {
    /**
     * Creates an instance of AppError.
     *
     * @param {string} message - The error message.
     * @param {number} statusCode - The HTTP status code associated with the error.
     */
    constructor(message, statusCode) {
        // Inherit the message property from the Error class and set it to the upcoming message upon creating an instance.
        super(message);
        // Add more properties to the error object generated by this class to use upon returning the error in a response.
        this.statusCode = statusCode || 500;
        this.status = this.statusCode.toString().startsWith("4") ? "fail" : "error";
        // We're setting the `isOperational` to `true` by default because each error we generate using the `AppError` class is an error
        // that we know and expect, but any other error that might occur we did not generate using the `AppError` is a programming error
        // and it will not have the `isOperational` property, thus it'll not be considered a safe-to-display error and will not be retured.
        // Instead, the `sendErrorProduction` function will return a generic error message.
        this.isOperational = true;
        // Exclude the error from the error stack trance and preserve the stack trace
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.default = AppError;
